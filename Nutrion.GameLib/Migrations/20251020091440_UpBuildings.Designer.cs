// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Nutrion.GameLib.Database;

#nullable disable

namespace Nutrion.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251020091440_UpBuildings")]
    partial class UpBuildings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OriginTileId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("OriginTileId");

                    b.HasIndex("PlayerOwnerId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.BuildingCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<float>("LevelMultiplier")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("BuildingCost");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.BuildingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingCostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GLTFModelPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TileRadius")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("BuildingType");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlayerColorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.PlayerColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerColor");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingCostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Tile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Q")
                        .HasColumnType("integer");

                    b.Property<int>("R")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Tile");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.TileContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GLTFComponent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TileId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("TileContent");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedOn", "Topic");

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Account", b =>
                {
                    b.HasOne("Nutrion.GameLib.Database.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Building", b =>
                {
                    b.HasOne("Nutrion.GameLib.Database.Entities.BuildingType", "BuildingType")
                        .WithMany()
                        .HasForeignKey("BuildingTypeId");

                    b.HasOne("Nutrion.GameLib.Database.Entities.Tile", "OriginTile")
                        .WithMany()
                        .HasForeignKey("OriginTileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Nutrion.GameLib.Database.Entities.Player", "PlayerOwner")
                        .WithMany()
                        .HasForeignKey("PlayerOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("OriginTile");

                    b.Navigation("PlayerOwner");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.BuildingType", b =>
                {
                    b.HasOne("Nutrion.GameLib.Database.Entities.BuildingCost", "BuildingCost")
                        .WithMany()
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("BuildingCost");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.PlayerColor", b =>
                {
                    b.HasOne("Nutrion.GameLib.Database.Entities.Player", "Player")
                        .WithOne("PlayerColor")
                        .HasForeignKey("Nutrion.GameLib.Database.Entities.PlayerColor", "PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Resource", b =>
                {
                    b.HasOne("Nutrion.GameLib.Database.Entities.Account", "Account")
                        .WithMany("Resources")
                        .HasForeignKey("AccountId");

                    b.HasOne("Nutrion.GameLib.Database.Entities.BuildingCost", "BuildingCost")
                        .WithMany("RssImpact")
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("Account");

                    b.Navigation("BuildingCost");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Tile", b =>
                {
                    b.HasOne("Nutrion.GameLib.Database.Entities.Building", null)
                        .WithMany("OccupiedTiles")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Nutrion.GameLib.Database.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.TileContent", b =>
                {
                    b.HasOne("Nutrion.GameLib.Database.Entities.Tile", "Tile")
                        .WithMany("Contents")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Account", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Building", b =>
                {
                    b.Navigation("OccupiedTiles");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.BuildingCost", b =>
                {
                    b.Navigation("RssImpact");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Player", b =>
                {
                    b.Navigation("PlayerColor");
                });

            modelBuilder.Entity("Nutrion.GameLib.Database.Entities.Tile", b =>
                {
                    b.Navigation("Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
